

int  light(){    //返回光强度  
	return analogRead(A1);
}
int  sound(){    //返回声音强度 电位器可调灵敏度
	return analogRead(A0);
}
char adx_state_last[3]={0};  //之前的状态
char adx_state_now[3]={0};   //现在的状态
int ADX_move(){ //返回三轴状态 简单判断是否倾斜
	int a=99,b=99,c=99;
	myadx_data = adx.adxl345_read_xyz();
	//printf("x: %05d  y: %05d  z: %05d\n", myadx_data.x, myadx_data.y, myadx_data.z);
	if(myadx_data.x<10000){a=1;}else{a=0;}
	if(myadx_data.y<10000){b=1;}else{b=0;}
	if(myadx_data.z<10000){c=1;}else{c=0;}
	adx_state_now[0] = a;adx_state_now[1] = b;adx_state_now[2] = c;//当前状态
	//比较
	if(adx_state_now[0]!=adx_state_last[0]||adx_state_now[1]!=adx_state_last[1]||adx_state_now[2]!=adx_state_last[2]){
		adx_state_last[0] = adx_state_now[0];adx_state_last[1] = adx_state_now[1];adx_state_last[2] = adx_state_now[2]; 
		return 0;//状态已经改变
	}else{
		adx_state_last[0] = adx_state_now[0];adx_state_last[1] = adx_state_now[1];adx_state_last[2] = adx_state_now[2]; 
		return 1;//状态没有改变
	}
	
}


float hr_dispose(int32_t data){
	if(data<70){return 1.0;}
	if(data>70&&data<80){return 0.95;}
	if(data>80&&data<90){return 0.9;}
	if(data>90){return 0.8;}
	return 99.99;
}
float sound_dispose(int data){
	if(data>120){return 0.8;}else{return 1;}
	return 99.99;
}
float light_dispose(int data){
	if(data==0){return 1.0;}
	if(data==1){return 0.95;}
	if(data==2){return 0.9;}
	if(data>2){return 0.8;}
	return 99.99;
}
float ADX_dispose(int data){
	if(data<5){return 1.0;}
	if(data>5&&data<10){return 0.95;}
	if(data>10&&data<15){return 0.9;}
	if(data>15){return 0.8;}
	return 99.99;
}


int state_adx=99;
int sp_state = 0;//程序运行位置逻辑标志位
int time_num = 0; //时间计数
int push = 0;
int push_time = 0; 
int last_time = 0;

int hr_num=0;
int sound_num=0;
int light_num=0;
int adx_num=0;

float c,d,e,f; 
float result;
void start()   //逻辑开始
{
	if(light()>120)  //变暗开始睡觉了 但是没睡着 该值可根据具体环境调整
	{
	printf("!!!!!!!!!!!start!!!!!!!\r\n");		
	sp_state=1;

	sp_state=2;
while(sp_state==2){   //睡眠质量评估
		if(last_time>=100)  //5s到
		{
			printf("hr=%d ADX=%d sound=%d light=%d\r\n",hr_num,adx_num,light_num,sound());
			c=hr_dispose(hr_num);  	//心跳
			d=ADX_dispose(adx_num);			//移动
			e=sound_dispose(sound());		//声音更新
			f=light_dispose(light_num);		//开关灯次数更新
			result = c*d*e*f;				//计算
			printf("c:%f d:%f e:%f f:%f",c,d,e,f);
			printf("result:%f\r\n",result);
			last_time = 0;
			light_num = 0;
			adx_num=0;
		}
		if(light()<120){      //开了灯
			light_num++;
		}
		state_adx=ADX_move();
		if(state_adx==0){  //移动了
			adx_num++;
		}
		delay(50);
		last_time++;
		if(hr_hander_srate==1){   //心跳中断
			hr_num = n_heart_rate;
			hr_hander_srate=0;
		}
	}
}
}






//初始化
 /*-----------------主体-----------------*/
 int setup(){    
	if(wiringPiSetup()==-1)return 1;
	fd = wiringPiI2CSetup( 0x57 );
	pinMode( 15, INPUT);
	pullUpDnControl(15, PUD_UP);
	if( wiringPiISR( 15 , INT_EDGE_FALLING , &max30102_read_hr) < 0) cout << "20";
    pcf8591Setup(BASE, Address);
	max30102_init();
	adx.adxl345_init();
     return 0;
 }


//主函数 
 int main(void){
     setup();
        while(1)
        {
            start();   //逻辑开始
        }
     return 0;
}
